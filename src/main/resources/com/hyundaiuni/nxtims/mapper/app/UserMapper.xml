<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hyundaiuni.nxtims.mapper.app.UserMapper">
    <select id="getUserListByParam" parameterType="hashmap" resultType="com.hyundaiuni.nxtims.domain.app.User">
        <![CDATA[
            SELECT A.USER_ID AS userId,
                   A.USER_NM AS userNm,
                   A.USER_PWD AS userPwd,
                   A.TEL_NO AS telNo,
                   A.EMAIL AS email,
                   A.USER_CL AS userCl,
                   A.DEPT_CD AS deptCd,
                   A.EMP_NO AS empNo,
                   A.GRADE_CD AS gradeCd,
                   A.CUST_CD AS custCd,
                   A.APPROVE_GRADE AS approveGrade,
                   A.APPROVE_SEQ AS approveSeq,
                   A.APPROVE_TAG AS approveTag,                   
                   A.EXPIRED_YN AS expiredYn,
                   A.LOCKED_YN AS lockedYn,
                   A.PWD_EXPIRED_YN AS pwdExpiredYn,
                   A.USE_YN AS useYn
              FROM ( SELECT ROWNUM AS RNUM,
                            A.*
                       FROM ( SELECT USER_ID,
                                     USER_NM,
                                     USER_PWD,
                                     TEL_NO,
                                     EMAIL,
                                     USER_CL,
                                     DEPT_CD,
                                     EMP_NO,
                                     GRADE_CD,
                                     CUST_CD,
                                     APPROVE_GRADE,
                                     APPROVE_SEQ,
                                     APPROVE_TAG,                   
                                     DECODE(SIGN(TO_DATE(EXPIRED_YMD,'YYYYMMDD')-TRUNC(SYSDATE)),-1,'Y','N') AS EXPIRED_YN,
                                     NVL(LOCKED_YN,'N') AS LOCKED_YN,
                                     DECODE(SIGN(TO_DATE(PWD_EXPIRED_YMD,'YYYYMMDD')-TRUNC(SYSDATE)),-1,'Y','N') AS PWD_EXPIRED_YN,
                                     USE_YN
                                FROM USERS
                               WHERE 1 = 1
        ]]>                       
        <if test="userId != null">   
                                 AND USER_ID LIKE '%'||#{userId}||'%'
        </if>
        <if test="userNm != null">   
                                 AND USER_NM LIKE '%'||#{userNm}||'%'
        </if>
        <if test="userCl != null">   
                                 AND USER_CL = #{userCl}
        </if>
        <if test="useYn != null">   
                                 AND USE_YN = #{useYn}
        </if>         
        <![CDATA[                           
                            ) A
                      WHERE ROWNUM <= #{offset} + #{limit} ) A
             WHERE RNUM > #{offset}
        ]]>    
    </select>    

    <select id="getUserById" parameterType="string" resultType="com.hyundaiuni.nxtims.domain.app.User">
        <![CDATA[
            SELECT USER_ID AS userId,
                   USER_NM AS userNm,
                   USER_PWD AS userPwd,
                   TEL_NO AS telNo,
                   EMAIL AS email,
                   USER_CL AS userCl,
                   DEPT_CD AS deptCd,
                   EMP_NO AS empNo,
                   GRADE_CD AS gradeCd,
                   CUST_CD AS custCd,
                   APPROVE_GRADE AS approveGrade,
                   APPROVE_SEQ AS approveSeq,
                   APPROVE_TAG AS approveTag,                   
                   DECODE(SIGN(TO_DATE(EXPIRED_YMD,'YYYYMMDD')-TRUNC(SYSDATE)),-1,'Y','N') AS expiredYn,
                   NVL(LOCKED_YN,'N') AS lockedYn,
                   DECODE(SIGN(TO_DATE(PWD_EXPIRED_YMD,'YYYYMMDD')-TRUNC(SYSDATE)),-1,'Y','N') AS pwdExpiredYn,
                   USE_YN AS useYn
              FROM USERS
             WHERE USER_ID = #{userId}
        ]]>
    </select>
    
    <select id="getUserByParam" parameterType="string" resultType="com.hyundaiuni.nxtims.domain.app.User">
        <![CDATA[
            SELECT USER_ID AS userId,
                   USER_NM AS userNm,
                   USER_PWD AS userPwd,
                   TEL_NO AS telNo,
                   EMAIL AS email,
                   USER_CL AS userCl,
                   DEPT_CD AS deptCd,
                   EMP_NO AS empNo,
                   GRADE_CD AS gradeCd,
                   CUST_CD AS custCd,
                   APPROVE_GRADE AS approveGrade,
                   APPROVE_SEQ AS approveSeq,
                   APPROVE_TAG AS approveTag,                   
                   DECODE(SIGN(TO_DATE(EXPIRED_YMD,'YYYYMMDD')-TRUNC(SYSDATE)),-1,'Y','N') AS expiredYn,
                   NVL(LOCKED_YN,'N') AS lockedYn,
                   DECODE(SIGN(TO_DATE(PWD_EXPIRED_YMD,'YYYYMMDD')-TRUNC(SYSDATE)),-1,'Y','N') AS pwdExpiredYn,
                   USE_YN AS useYn
              FROM USERS
             WHERE USER_ID = #{userId}
               AND USER_NM = #{userNm}
               AND EMAIL = #{email}
        ]]>
    </select>    
    
    <insert id="insertUser" parameterType="com.hyundaiuni.nxtims.domain.app.User">
        <![CDATA[
            INSERT INTO USERS
            (
             USER_ID,
             USER_NM,
             USER_PWD,
             TEL_NO,
             EMAIL,
             USER_CL,
             DEPT_CD,
             EMP_NO,
             GRADE_CD,
             CUST_CD,
             APPROVE_GRADE,
             APPROVE_SEQ,
             APPROVE_TAG,
             EXPIRED_YMD,
             LOCKED_YN,
             PWD_EXPIRED_YMD,
             USE_YN,
             REG_DATE,
             REG_USER_ID           
            )
            VALUES
            (
             #{userId},
             #{userNm},
             #{userPwd},
             #{telNo},
             #{email},
             #{userCl},
             #{deptCd},
             #{empNo},
             #{gradeCd},
             #{custCd},
             #{approveGrade},
             #{approveSeq},
             #{approveTag},
             #{expiredYmd},
             #{lockedYn},
             #{pwdExpiredYmd},
             #{useYn},
             SYSDATE,
             #{sessionUserId}
            )
        ]]>
    </insert>
    
    <update id="updateUser" parameterType="com.hyundaiuni.nxtims.domain.app.User">
        <![CDATA[
            UPDATE USERS
               SET USER_NM = #{userNm},
                   TEL_NO = #{telNo},
                   EMAIL = #{email},
                   USER_CL = #{userCl},
                   DEPT_CD = #{deptCd},
                   EMP_NO = #{empNo},
                   GRADE_CD = #{gradeCd},
                   CUST_CD = #{custCd},
                   APPROVE_GRADE = #{approveGrade},
                   APPROVE_SEQ = #{approveSeq},
                   APPROVE_TAG = #{approveTag},
                   EXPIRED_YMD = #{expiredYmd},
                   LOCKED_YN = #{lockedYn},
                   PWD_EXPIRED_YMD = #{pwdExpiredYmd},
                   USE_YN = #{useYn},
                   UPD_DATE = SYSDATE,
                   UPD_USER_ID = #{sessionUserId}
             WHERE USER_ID = #{userId}
        ]]>
    </update>
    
    <update id="updateUserPwd" parameterType="hashmap">
        <![CDATA[
            UPDATE USERS
               SET USER_PWD = #{userPwd},
                   PWD_EXPIRED_YMD = #{pwdExpiredYmd},
                   UPD_DATE = SYSDATE,
                   UPD_USER_ID = #{sessionUserId}
             WHERE USER_ID = #{userId}
        ]]>
    </update>        
    
    <delete id="deleteUserByUserId" parameterType="string">
        <![CDATA[
            DELETE USERS
             WHERE USER_ID = #{userId}
        ]]>
    </delete>
    
    <delete id="deleteUserAuthByUserId" parameterType="string">
        <![CDATA[
            DELETE USER_AUTH
             WHERE USER_ID = #{userId}
        ]]>
    </delete>
    
    <delete id="deleteUserAccessLogByUserId" parameterType="string">
        <![CDATA[
            DELETE USER_ACCESS_LOG
             WHERE USER_ID = #{userId}
        ]]>
    </delete>
    
    <delete id="deleteUserPwdChangeLogByUserId" parameterType="string">
        <![CDATA[
            DELETE USER_PWD_CHANGE_LOG
             WHERE USER_ID = #{userId}
        ]]>
    </delete>        
    
    <select id="getAuthByUserId" parameterType="string" resultType="com.hyundaiuni.nxtims.domain.app.Auth">
        <![CDATA[
            SELECT AUTH_ID AS authId
              FROM USER_AUTH
             WHERE USER_ID = #{userId}
        ]]>
    </select>
    
    <select id="getUserAuthByPk" parameterType="com.hyundaiuni.nxtims.domain.app.Auth" resultType="com.hyundaiuni.nxtims.domain.app.Auth">
        <![CDATA[
            SELECT AUTH_ID AS authId
              FROM USER_AUTH
             WHERE USER_ID = #{userId}
               AND AUTH_ID = #{authId}
        ]]>
    </select>
    
    <insert id="insertUserAuth" parameterType="com.hyundaiuni.nxtims.domain.app.Auth">
        <![CDATA[
            INSERT INTO USER_AUTH
            (
             USER_ID,
             AUTH_ID,
             REG_DATE,
             REG_USER_ID              
            )
            VALUES
            (
             #{userId},
             #{authId},
             SYSDATE,
             #{sessionUserId}
            )              
        ]]>
    </insert>
    
    <delete id="deleteUserAuthByPk" parameterType="com.hyundaiuni.nxtims.domain.app.Auth" >
        <![CDATA[
            DELETE USER_AUTH
             WHERE USER_ID = #{userId}
               AND AUTH_ID = #{authId}
        ]]>
    </delete>
    
    <select id="getMenuByUserId" parameterType="string" resultType="com.hyundaiuni.nxtims.domain.app.Resource">
        <![CDATA[
            SELECT LEVEL AS resourceLevel,
                   A.RESOURCE_ID AS resourceId,
                   A.RESOURCE_NM AS resourceNm,
                   A.RESOURCE_URL AS resourceUrl,
                   A.RESOURCE_TYPE AS resourceType,
                   A.LINK_RESOURCE_ID AS linkResourceId
              FROM ( SELECT D.RESOURCE_ID,
                            D.RESOURCE_NM,
                            D.RESOURCE_URL,
                            D.RESOURCE_TYPE,
                            D.LINK_RESOURCE_ID,
                            D.LINK_RESOURCE_SEQ
                       FROM USERS A,
                            USER_AUTH B,
                            AUTH_RESOURCE C,
                            RESOURCES D
                      WHERE A.USER_ID = #{userId}
                        AND A.USER_ID = B.USER_ID
                        AND B.AUTH_ID = C.AUTH_ID
                        AND C.RESOURCE_ID = D.RESOURCE_ID
                        AND D.RESOURCE_TYPE = '01'
                        AND D.USE_YN = 'Y' ) A
             START WITH A.RESOURCE_ID = '000000'    
           CONNECT BY A.LINK_RESOURCE_ID = PRIOR A.RESOURCE_ID
             ORDER SIBLINGS BY A.LINK_RESOURCE_SEQ
        ]]>
    </select>
    
    <update id="updateLoginSuccess" parameterType="string">
        <![CDATA[
            UPDATE USERS
               SET LAST_LOGIN_DATE = SYSDATE,
                   AUTH_FAIL_CNT = 0
             WHERE USER_ID = #{userId}
        ]]>
    </update>
    
    <update id="updateLoginDate" parameterType="hashmap">
        <![CDATA[
            MERGE INTO USER_ACCESS_LOG
            USING DUAL
               ON (USER_ID = #{userId} AND SESSION_ID = #{sessionId}) 
             WHEN MATCHED THEN
                  UPDATE
                     SET ACCESS_IP = #{accessIp},
                         LOGIN_DATE = SYSDATE
             WHEN NOT MATCHED THEN
                  INSERT
                  (
                   USER_ID,
                   SESSION_ID,
                   ACCESS_IP,
                   LOGIN_DATE
                  )
                  VALUES
                  (
                   #{userId},
                   #{sessionId},
                   #{accessIp},
                   SYSDATE
                  )
        ]]>
    </update>    
    
    <update id="updateAuthFailCnt" parameterType="string">
        <![CDATA[
            UPDATE USERS
               SET AUTH_FAIL_CNT = NVL(AUTH_FAIL_CNT,0) + 1
             WHERE USER_ID = #{userId}
        ]]>
    </update>
    
    <select id="getAuthFailCnt" parameterType="string" resultType="int">
        <![CDATA[
            SELECT AUTH_FAIL_CNT
              FROM USERS
             WHERE USER_ID = #{userId}
        ]]>
    </select>
    
    <update id="updateLockedYn" parameterType="hashmap">
        <![CDATA[
            UPDATE USERS
               SET LOCKED_YN = #{lockedYn}
             WHERE USER_ID = #{userId}
        ]]>
    </update>
    
    <update id="updateLogoutDate" parameterType="hashmap">
        <![CDATA[
            MERGE INTO USER_ACCESS_LOG
            USING DUAL
               ON (USER_ID = #{userId} AND SESSION_ID = #{sessionId}) 
             WHEN MATCHED THEN
                  UPDATE
                     SET LOGOUT_DATE = SYSDATE
             WHEN NOT MATCHED THEN
                  INSERT
                  (
                   USER_ID,
                   SESSION_ID,
                   LOGOUT_DATE
                  )
                  VALUES
                  (
                   #{userId},
                   #{sessionId},
                   SYSDATE
                  )
        ]]>
    </update>
    
    <insert id="insertUserPwdChangeLog" parameterType="hashmap">
        <![CDATA[
            INSERT INTO USER_PWD_CHANGE_LOG
            (
             USER_ID,
             USER_PWD,
             REG_DATE             
            )
            VALUES
            (
             #{userId},
             #{userPwd},
             SYSDATE
            )              
        ]]>
    </insert> 
    
    <select id="isExistingPasswordOnLog" parameterType="hashmap" resultType="boolean">
        <![CDATA[    
            SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END
              FROM (SELECT USER_PWD
                      FROM (SELECT USER_PWD
                              FROM USER_PWD_CHANGE_LOG
                             WHERE USER_ID = #{userId}
                             ORDER BY REG_DATE DESC)
                     WHERE ROWNUM < #{limit})
             WHERE USER_PWD = #{userPwd}
        ]]>
    </select>
</mapper>